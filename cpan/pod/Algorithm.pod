# Copyright 2022 Jeffrey Kegler
# This file is part of Marpa::R2.  Marpa::R2 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R2.  If not, see
# http://www.gnu.org/licenses/.

=head1 NAME

Marpa::R2::Algorithm - The Earley algorithm

=head1 Description

For most purposes, the user does not need to know anything
about the Earley algorithm or Marpa algorithm,
and can ignore this document.
This document describes those aspects of the Earley 
and Marpa
algorithms which 
are relevant in certain cases,
when using Marpa.
These cases include
L<tracing and
debugging|Marpa::R2::Progress.pod>
and
L<use of the recognizer's ranking
methods|Marpa::R2::Rank.pod>.
A reader of this document should
be familiar with the basic parsing terminology
described in L<Marpa::R2::Vocabulary.pod>.

=head1 Dotted Rules

To understand this document,
it is important to understand what a dotted rule is.
An acquaintance with
dotted rules is also important in understanding
Marpa's progress reports.
Dotted rules
are thoroughly described
L<in the progress report
documentation|Marpa::R2::Progress>.
This section repeats the main ideas
from the perspective of this document.

Recall that a rule is a B<LHS> (left hand side)
and a B<RHS> (right hand side).
The B<LHS> is always exactly one symbol.
The B<RHS> is zero or more symbols.
Consider the following example of a rule,
given in the syntax of Marpa's DSL.

=for Marpa::R2::Display
ignore: 1

    S ::= A B C

=for Marpa::R2::Display

Dotted rules are used to track the
progress of a parse through a rule.
They consist of a rule and a B<dot position>,
which marks the point in the RHS which scanning
has reached.
It is called the B<dot position> because,
traditionally,
the position is represented by a dot.
The symbol before the dot is called
the B<predot symbol>.

The following is an example of a dotted rule.
(The dot of a dotted rule is not part of Marpa's DSL but,
when it is useful for illustration,
we will use it in the notation in this document.)

=for Marpa::R2::Display
ignore: 1

    S ::= A B . C

=for Marpa::R2::Display

In this rule, B<B> is the B<predot symbol>.

When the dot is after the last symbol of the RHS,
the dotted rule is called a B<completion>.
Here is the completion for the above rule:

=for Marpa::R2::Display
ignore: 1

    S ::= A B C .

=for Marpa::R2::Display

In this completion example, the symbol B<C>
is the predot symbol.

When the dot is before the first symbol of the RHS,
the rule is called a B<prediction>.
Here is the prediction of the rule we've been
using for our examples:

=for Marpa::R2::Display
ignore: 1

    S ::= . A B C

=for Marpa::R2::Display

In predictions, there is no predot symbol.

=head1 Dotted rules

Marpa is based on Jay Earley's algorithm for parsing.
The idea behind Earley's algorithm is that you can
parse by building a table of rules
and where you are in those rules.
"Where" means two things: location in the rule relative to the rule's
symbols,
and location relative to the parse's input stream.

Let's look at an example of a rule in a context-free grammar.
Here's the rule for assignment from the Perl distribution's C<perly.y>

S<C<E<nbsp>E<nbsp>E<nbsp>E<nbsp>termbinop -E<gt> term ASSIGNOP term>>

C<ASSIGNOP> is C<perly.y>'s internal name for
the assignment operator.
In plain Perl terms, this is the "C<=>" character.

In parsing this rule, we can be at any of four possible locations.
One location is at the beginning, before all of the symbols.
The other three locations are immediately after each of the rule's
three symbols.

Within a rule, position relative to the symbols of the rule
is traditionally indicated with a dot.  In fact, the symbol-relative
rule position is very often called the B<dot location>.  Taken as
a pair, a rule and a dot location are called a B<dotted rule>.

Here's our rule with a dot location indicated:

S<C<E<nbsp>E<nbsp>E<nbsp>E<nbsp>termbinop -E<gt> . term ASSIGNOP term>>

The dot location in this dotted rule is at the beginning.
A dot location at the beginning of a dotted rule means
that we have not recognized any symbols in the rule yet.
All we are doing is predicting that the rule will occur.
A dotted rule with the dot before all of its symbols is called a B<prediction>
or a B<predicted rule>.

Here's another dotted rule:

S<C<E<nbsp>E<nbsp>E<nbsp>E<nbsp>termbinop -E<gt> term . ASSIGNOP term>>

In this dotted rule,
we are saying we have seen a C<term>, but have not yet recognized
an C<ASSIGNOP>.

There's another special kind of dotted rule, a completion.
A B<completion> (also called a B<completed rule>)
is a dotted rule with the dot after all of the symbols.
Here is the completion for the rule that we have been using as an example:

S<C<E<nbsp>E<nbsp>E<nbsp>E<nbsp>termbinop -E<gt> term ASSIGNOP term .>>

A completion indicates that a rule has been fully recognized.

=head1 Earley items

The dotted rules contain
all but one piece of the information
that Marpa
needs to track.
The missing piece is the second of the two "wheres": where in the input stream.
To associate input stream location and dotted rules, Marpa uses what are now called Earley items.

A convenient way to think of an B<Earley item> is as a triple, or 3-tuple,
consisting of dotted rule, origin and current location.
The B<origin> is the location in the input stream where the dotted rule starts.
The B<current location> (also called the B<dot location>)
is the location in the input stream which corresponds to the
dot position.

In Marpa terms,
G1 location is location in terms of the G1 subgrammar's Earley sets.
When the term "location" is used in this document, it means G1 location unless
otherwise indicated.

A user often finds it much more convenient to think in terms of line and column position in
the input stream, instead of G1 location.
Every G1 location corresponds to a range of positions in the input stream.
When the term "position" is used in this document, it means input stream position,
unless otherwise indicated.

Two noteworthy consequences
follow from the way in which origin and current G1 location are defined.
First,
if a dotted rule is a prediction,
then origin and current location will always be the same.
Second,
the input stream location where a rule ends is not tracked unless the
dotted rule is a completion.
If its dotted rule is not a completion,
an Earley item does not tell us
if a rule will
ever be completed,
much less at which location.

=head1 Details

The mathematical material in this section
is not essential to understanding
the rest of this document.
While some people will find it helpful,
but others find them distracting or annoying,
which is why
it is segregated here.

=head2 Earley parsing

In this section we
assume that the reader is comfortable
reading and analyzing BNF.
We will often use the basic theorem
of Earley parsing.
As a reminder,
the theorem states
that an instance of a dotted rule is present
in a parse,
if and
only if that instance is valid for the input so far.
More formally:

B<(EARLEY)>:
Let C<G> be a grammar.
Let C<Syms> be the set of symbols in C<G>
and let exactly one of the symbols
in C<Syms> be distinguished as the
"start symbol".
Call the "start symbol", C<< <Start> >>.

Let C<Terms> be a subset of C<Syms>
called the "terminals" of C<G>.
Let C<W> be a string of symbols from C<Terms>.
Let C<W[i]> be the C<i>'th terminal of C<W>,
so that the first terminal of C<W> is
C<W[1]>.

Where C<alpha> and C<beta> are sequences
of symbols in C<Syms>,
let C<< alpha => beta >> mean that C<alpha>
derives C<beta> in grammar C<G>
in zero or more steps.

In this theorem,
let
C<alpha>, C<beta>, C<gamma>,
C<delta> be sequences
of zero or more symbols in C<Syms>.

Theorem:
These two statement sets
are equivalent:

Statement set 1 is true if and only if
we have all of the following:

1a.
C<eitem> is an instance of a dotted
rule, which we will treat
as a triple:
C<dp, origin, current>.
In the literature,
a triple of this form is also called
an "Earley item".

1b.
C<dp> is the dotted
rule
C<< <A> ::= beta . gamma> >>.

Statement set 2 is true if and only if
we have all of the following:

2a. C<< alpha => W[1] ... W[origin] >>

2b. C<< beta => W[origin+1] .. W[current] >>

2c. C<< <Start> => alpha <A> delta >>

The proof is omitted.
It can be found in Jay Earley's thesis,
in his original paper,
and in Aho and Ullmann's 1972 textbook.

=head1 Copyright and License

=for Marpa::R2::Display
ignore: 1

  Copyright 2022 Jeffrey Kegler
  This file is part of Marpa::R2.  Marpa::R2 is free software: you can
  redistribute it and/or modify it under the terms of the GNU Lesser
  General Public License as published by the Free Software Foundation,
  either version 3 of the License, or (at your option) any later version.

  Marpa::R2 is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser
  General Public License along with Marpa::R2.  If not, see
  http://www.gnu.org/licenses/.

=for Marpa::R2::Display::End

=cut

