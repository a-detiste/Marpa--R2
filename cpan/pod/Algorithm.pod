# Copyright 2022 Jeffrey Kegler
# This file is part of Marpa::R2.  Marpa::R2 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R2.  If not, see
# http://www.gnu.org/licenses/.

=head1 NAME

Marpa::R2::Algorithm - The Earley algorithm

=head1 Description

For most purposes, the user does not need to know anything
about the Earley algorithm or Marpa algorithm,
and can ignore this document.
This document describes those aspects of the Earley 
and Marpa
algorithms which 
are relevant in certain cases,
when using Marpa.
These cases include
L<tracing and
debugging|Marpa::R2::Progress.pod>
and
L<use of the recognizer's ranking
methods|Marpa::R2::Rank.pod>.

Resources for readers who want to know 
the details of the Marpa algorithm that are
beyond the scope of this document are
given L<below|/"Resources on the Marpa algorithm">.
A reader of this document should
be familiar with the basic parsing terminology
described in L<Marpa::R2::Vocabulary.pod>.

Marpa is based on Jay Earley's algorithm for parsing.
The idea behind Earley's algorithm is that you can
parse by building a table of rules
and where you are in those rules.
"Where" means two things: location in the rule relative to the rule's
symbols,
and location relative to the parse's input stream.

=head1 Dotted Rules

To understand this document,
it is important to understand what a dotted rule is.
An acquaintance with
dotted rules is also important in understanding
Marpa's progress reports.
Dotted rules
are thoroughly described
L<in the progress report
documentation|Marpa::R2::Progress>.
This section repeats the main ideas
from the perspective of this document.

Recall that a rule is a B<LHS> (left hand side)
and a B<RHS> (right hand side).
The B<LHS> is always exactly one symbol.
The B<RHS> is zero or more symbols.
Consider the following example of a rule,
given in the syntax of Marpa's DSL.

=for Marpa::R2::Display
ignore: 1

    S ::= A B C

=for Marpa::R2::Display

Dotted rules are used to track the
progress of a parse through a rule.
Within a rule, position relative to the symbols of the rule
is traditionally indicated with a dot.
In fact, the symbol-relative
rule position is very often called the B<dot location>.
Taken as
a pair, a rule and a dot location are called a B<dotted rule>.
The symbol before the dot is called
the B<predot symbol>.

In parsing this rule, we can be at any of four possible locations.
One location is at the beginning, before all of the symbols.
The other three locations are immediately after each of the rule's
three symbols.
The following is an example of a dotted rule,
with the dot after the second RHS symbol.

=for Marpa::R2::Display
ignore: 1

    S ::= A B . C

=for Marpa::R2::Display

In this rule, B<B> is the B<predot symbol>.
This rule indicates that we have recognized
an C<A>, followed by a C<B>,
but that we have yet to see a C<C>.

When the dot is after the last symbol of the RHS,
the dotted rule is called a B<completed rule>,
or a B<completion>.
A completion indicates that a rule has been fully recognized.

Here is the completion for the above rule:

=for Marpa::R2::Display
ignore: 1

    S ::= A B C .

=for Marpa::R2::Display

In this completion example, the symbol B<C>
is the predot symbol.

When the dot is before the first symbol of the RHS,
the rule is called a B<predicted rule>,
or a B<prediction>.
Here is the prediction of the rule we've been
using for our examples:

=for Marpa::R2::Display
ignore: 1

    S ::= . A B C

=for Marpa::R2::Display

A prediction indicates
that we have not yet recognized any of the symbols in the rule.
All a prediction does is to predict that the rule will occur.
In predictions, there is no predot symbol.

=head1 Earley items

The dotted rules contain
all but one piece of the information
that Marpa
needs to track.
The missing piece is the second of the two "wheres": where in the input stream.
To associate input stream location and dotted rules, Marpa uses what are now called Earley items.

A convenient way to think of an B<Earley item> is as a triple, or 3-tuple,
consisting of dotted rule, origin and current location.
The B<origin> is the location in the input stream where the dotted rule starts.
The B<current location>
is the location in the input stream which corresponds to the
dot position.

Two noteworthy consequences
follow from the way in which origin and current location are defined.
First,
if a dotted rule is a prediction,
then origin and current location will always be the same.
Second,
the location where a rule ends is not tracked unless the
dotted rule is a completion.
If its dotted rule is not a completion,
an Earley item does not tell us
if a rule will
ever be completed,
much less at which location.

=head1 Earley item stuff, was "Choicepoints"

Informally
a B<choicepoint> is a place where the parser
can decide among one or more B<parse choices>.
A choicepoint can be thought of either a set
of parse choices,
or as the tuple of the properties which all
the parse choices for the choicepoint
must have in common.

For a choicepoint to work, all the choices must
have enough in common that each of them
could be replaced with any other.
Thought of as a tuple of properties,
a choicepoint is a triple: C<(dp, start, current)>.
In this triple,

=over 4

=item *

C<dp> is a dotted rule.
The predot symbol of C<dp>
is the B<predot symbol> of the choicepoint --
if C<dp> is a prediction,
there is no predot symbol.
The rule of C<dp>
is the B<rule> of the choicepoint.
The
dot position of C<dp>
is the B<dot position> of the choicepoint.

=item *

C<start> is the lexeme location where the dotted
rule begins.
C<start> is sometimes called the B<origin> of the
choicepoint.

=item *

C<current> is the lexeme location corresponding to the dot
in C<dp>.
C<current> is sometimes
called the C<current location> of the choicepoint.

=back

The choicepoint is a prediction choicepoint if
C<dp> is a prediction.
The choicepoint is a token choicepoint if
it is not a prediction choicepoint and
the predot symbol of C<dp> is a token symbol.
The choicepoint is a rule choicepoint if
it is not a prediction choicepoint and
the predot symbol of C<dp> is the LHS of a rule.
(Token symbols are never the LHS of a rule,
and vice versa.)

=head1 Confluences, was "Parse choices"

As mentioned, a choicepoint can be seen as a set
of one or more B<parse choices>.
From the point of view of the individual parse trees,
the traversal is top-down
and left-to-right.

Often, there is only one parse choice.
When there is only one parse choice,
the choicepoint is said to be B<trivial>.
Prediction and token choicepoints are always trivial.
If all of the choicepoints of a parse
are trivial,
the parse is unambiguous.

Every rule choicepoint,
and therefore every non-trivial choicepoint,
has a set of parse choices associated with it.
For a rule choicepoint,
each parse choice is a duple: C<(mainstem, tributary)>,
where
C<tributary> and C<mainstem> are also choicepoints.
The first element of the duple is the B<mainstem choicepoint>,
or B<mainstem>,
of the parse choice.
The second element of the duple is the B<tributary choicepoint>,
or B<tributary>
of the parse choice.

Let C<confl> be a rule choicepoint
and let C<(stem, trib)> be one of the
parse choices of C<confl>.
Then we say that C<confl> is the B<confluence>
of C<trib> and C<stem>;
and we say that C<trib> is one of the B<tributaries>
of C<confl>.

The mainstem of a parse choice
represents a portion
of the parse that "leads up to" the tributary.
The mainstem
of a parse choice plays no role in ranking
decisions,
and this document will mostly ignore mainstems.

=head1 Confluences, was "Tributaries"

Since it is a choicepoint, a tributary choicepoint
must also be a triple.
Let the confluence of C<trib> be
C<confl>.
Let the triple for for C<trib> be C<(trib-dp, trib-origin, trib-current)>.
Let the
triple for for C<confl> be C<(confl-dp, confl-origin, confl-current)>.

If C<confl> is the confluence of C<trib>, then

=over 4

=item *

C<trib-current> is always the same as
C<confl-current>.
In other words,
the current location of C<trib>
is the same as the current location of C<confl>.

=item *

C<trib-origin> is before C<confl-current>.
In other words,
the origin of C<trib>
is before the current location of C<confl>.

=item *

C<trib-origin>
is at or after C<confl-origin>.
In other words,
the origin of C<trib>
is at or after the origin of C<confl>.
While it is not always properly between
C<confl-origin> and C<confl-current>,
C<trib-origin> is always in the range bounded
by
C<confl-origin> on one side,
and by C<confl-current>
on the other.
C<trib-origin>
can therefore be thought of as "in the middle"
of the parse choice.
For this reason,
C<trib-origin> is often called the
B<middle location> of the parse choice.

=item *

The dotted rule of C<trib> will be a completion.

=item *

The LHS of the dotted rule of C<trib> will be
the predot symbol of C<confl>.

=back

Summing up the above,
the tributaries of a rule choicepoint
vary only by
middle position
and rule RHS.
The tributaries of a rule choicepoint
always share the same current lexeme location
and rule LHS,
and their dotted rules
are always completions.

=head1 Resources on the Marpa algorithm

This document establishes vocabulary and
explains some aspects of the Marpa algorithm
which are relevant to discussions in these
C<Marpa::R2> documents.
It is not intended as an full explanation
of the workings of the Marpa algorithm.

Those who want to learn more about the Marpa
algorithm,
and who are not already familiar with Earley's
algorithm,
should consult an introductory presentation of
it.
One good start is the
Wikipedia article
L<https://en.wikipedia.org/wiki/Earley_parser>.

For the workings of the Marpa algorithm
there are L<two arxiv.org
papers|Marpa::R2/"Marpa papers">.

=head1 Details

The mathematical material in this section
is not essential to understanding
the rest of this document.
While some people will find it helpful,
but others find them distracting or annoying,
which is why
it is segregated here.

=head2 Earley parsing

In this section we
assume that the reader is comfortable
reading and analyzing BNF.
We will often use the basic theorem
of Earley parsing.
As a reminder,
the theorem states
that an instance of a dotted rule is present
in a parse,
if and
only if that instance is valid for the input so far.
More formally:

B<(EARLEY)>:
Let C<G> be a grammar.
Let C<Syms> be the set of symbols in C<G>
and let exactly one of the symbols
in C<Syms> be distinguished as the
"start symbol".
Call the "start symbol", C<< <Start> >>.

Let C<Terms> be a subset of C<Syms>
called the "terminals" of C<G>.
Let C<W> be a string of symbols from C<Terms>.
Let C<W[i]> be the C<i>'th terminal of C<W>,
so that the first terminal of C<W> is
C<W[1]>.

Where C<alpha> and C<beta> are sequences
of symbols in C<Syms>,
let C<< alpha => beta >> mean that C<alpha>
derives C<beta> in grammar C<G>
in zero or more steps.

In this theorem,
let
C<alpha>, C<beta>, C<gamma>,
C<delta> be sequences
of zero or more symbols in C<Syms>.

Theorem:
These two statement sets
are equivalent:

Statement set 1 is true if and only if
we have all of the following:

1a.
C<eitem> is an instance of a dotted
rule, which we will treat
as a triple:
C<dp, origin, current>.
In the literature,
a triple of this form is also called
an "Earley item".

1b.
C<dp> is the dotted
rule
C<< <A> ::= beta . gamma> >>.

Statement set 2 is true if and only if
we have all of the following:

2a. C<< alpha => W[1] ... W[origin] >>

2b. C<< beta => W[origin+1] .. W[current] >>

2c. C<< <Start> => alpha <A> delta >>

The proof is omitted.
It can be found in Jay Earley's thesis,
in his original paper,
and in Aho and Ullmann's 1972 textbook.

=head1 Copyright and License

=for Marpa::R2::Display
ignore: 1

  Copyright 2022 Jeffrey Kegler
  This file is part of Marpa::R2.  Marpa::R2 is free software: you can
  redistribute it and/or modify it under the terms of the GNU Lesser
  General Public License as published by the Free Software Foundation,
  either version 3 of the License, or (at your option) any later version.

  Marpa::R2 is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser
  General Public License along with Marpa::R2.  If not, see
  http://www.gnu.org/licenses/.

=for Marpa::R2::Display::End

=cut

